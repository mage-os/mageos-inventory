<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontValidateGroupedProductDisappearAfterEditingStockStatusToOutOfStockTest">
        <annotations>
            <stories value="Group Product Custom Stock."/>
            <title value="Validate that Grouped product gets disappear after editing stock status to out of stock"/>
            <description value="Admin create a grouped product and validate that Grouped product gets disappear after editing stock status to out of stock"/>
            <testCaseId value="AC-2834"/>
            <severity value="MINOR"/>
        </annotations>
        <before>
            <!--Create a subcategory-->
            <createData entity="SimpleSubCategory" stepKey="category"/>
            <!--Create a simple product-->
            <createData entity="SimpleProduct" stepKey="createSimpleProduct">
                <field key="price">10.00</field>
                <field key="name">Simple Product 1</field>
                <requiredEntity createDataKey="category"/>
            </createData>
            <createData entity="ApiGroupedProduct" stepKey="createGroupedProduct"/>
            <!-- Create a grouped product and assign simple product in it-->
            <createData entity="OneSimpleProductLink" stepKey="linkSimpleProduct">
                <requiredEntity createDataKey="createGroupedProduct"/>
                <requiredEntity createDataKey="createSimpleProduct"/>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <!--Delete created data-->
            <deleteData createDataKey="createSimpleProduct" stepKey="deleteFirstSimpleProduct"/>
            <deleteData createDataKey="createGroupedProduct" stepKey="deleteGroupedProduct"/>
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="ClearFiltersAdminDataGridActionGroup" stepKey="clearFilter"/>
            <deleteData createDataKey="createStock" stepKey="deleteCustomStock"/>
            <!--Disable all sources.-->
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="deleteSource"/>
            <!--Admin logout-->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>
        </after>
        <!--Create source and stock-->
        <createData entity="FullSource1" stepKey="createSource"/>
        <createData entity="BasicMsiStockWithMainWebsite1" stepKey="createStock"/>
        <createData entity="SourceStockLinked1" stepKey="sourceStockLink">
            <requiredEntity createDataKey="createStock"/>
            <requiredEntity createDataKey="createSource"/>
        </createData>
        <!-- Assign Test source to simple product -->
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openProductBeforeStaging">
            <argument name="productId" value="$createSimpleProduct.id$"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForSimpleProductEditPage"/>
        <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unAssignDefaultSourceFromProduct">
            <argument name="sourceCode" value="{{_defaultSource.name}}"/>
        </actionGroup>
        <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignCreatedSourceToFirstChildProduct">
            <argument name="sourceCode" value="$createSource.source[source_code]$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="5" stepKey="fillSourceQtyField1"/>
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveCreateFirstSimpleProduct"/>
        <!-- Add category and change source quantity to grouped product -->
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openGroupedProduct">
            <argument name="productId" value="$createGroupedProduct.id$"/>
        </actionGroup>
        <actionGroup ref="SetCategoryByNameActionGroup" stepKey="addCategoryToGroupedProduct">
            <argument name="categoryName" value="$$category.name$$"/>
        </actionGroup>
        <actionGroup ref="FillDefaultQuantityForLinkedToGroupProductInGridActionGroup" stepKey="fillDefaultQtyForSimpleProduct">
            <argument name="productName" value="$$createSimpleProduct.name$$"/>
            <argument name="qty" value="5"/>
        </actionGroup>
        <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveAndCloseGroupedProduct"/>
        <!--Flush cache and Reindex-->
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
            <argument name="tags" value="config full_page"/>
        </actionGroup>
        <!--Go to storefront and open category and then assert grouped product is present-->
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="againOpenEnabledCategory">
            <argument name="categoryName" value="$$category.name$$"/>
        </actionGroup>
        <waitForText userInput="$$createGroupedProduct.name$$" selector="{{StorefrontCategoryMainSection.specifiedProductItemInfo($$createGroupedProduct.name$$)}}" stepKey="seeGroupedProduct"/>
        <!--Go to simple product and update status as out of stock-->
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openProductToUpdateStock">
            <argument name="productId" value="$createSimpleProduct.id$"/>
        </actionGroup>
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProductPostOutOfStock"/>
        <!--Go to storefront and open category and then assert grouped product is not present-->
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="openEnabledCategory">
            <argument name="categoryName" value="$$category.name$$"/>
        </actionGroup>
        <dontSee userInput="$$createGroupedProduct.name$$" selector="{{StorefrontCategoryMainSection.specifiedProductItemInfo($$createGroupedProduct.name$$)}}" stepKey="dontSeeGroupedProduct"/>
    </test>
</tests>
